<?php

/**
 * @file
 * Ting smart carousel module main file.
 */
use OpenSearch\OpenSearchTingObjectCollection;

function ting_smart_carousel_menu() {
  $items = array();

  $items['ting_smart_carousel/results/ajax/%/%'] = array(
    'title' => 'Show search carousel results',
    'page callback' => 'ting_smart_carousel_result',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'file' => 'ting_smart_carousel.pages.inc',
    'type' => MENU_CALLBACK,
  );
  
 return $items;
}

function ting_smart_carousel_theme($existing, $type, $theme, $path) {
  return array(
      'ting_smart_carousel_item' => array(
          'variables' => array(
              'title' => NULL,
              'creators' => NULL,
              'cover' => NULL,
          ),
          'template' => 'ting-smart-carousel-item',
          'path' => $path . '/templates',
      ),
      'ting_smart_carousel_menu' => array(
          'variables' => array(
              'menu' => NULL,
          ),
          'template' => 'ting-smart-carousel-menu',
          'path' => $path . '/templates',
      ),
  );
}

 /**
  * Implements hook_ctools_plugin_directory().
  *
  * It simply tells panels where to find the .inc files that define various
  * args, contexts, content_types.
  */
function ting_smart_carousel_ctools_plugin_directory($module, $plugin) {
 if ($module == 'ctools' && !empty($plugin)) {
   return 'plugins/' . $plugin;
 }
}

 /**
  * Implements hook_ctools_plugin_api().
  */
function ting_smart_carousel_ctools_plugin_api($module, $api) {
   if ($module == 'page_manager' && $api == 'pages_default') {
     return array('version' => 1);
   }
   if ($module == "strongarm" && $api == "strongarm") {
    return array("version" => "1");
  }
}

/**
 * Helper function to display administration information in panels.
 *
 * Can be used within a ctools plugin file for admin info.
 */
function ting_smart_carousel_get_default_admin_info($subtype, $conf, $context) {
  $output = new stdClass();
  //$output->title = t('Serendipity inspiration list (@subtype)', array('@subtype' => $subtype));
  $output->content = t('Carousel delta: @delta', array('@delta' => $conf['deltaid'])) . '<br/>';

  return $output;
}

/**
 * Implements hook_form_alter().
 */

function ting_smart_carousel_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'inspiration_carousel_node_form') {
    if (!empty($fcsearch = $form_state['field']['field_ting_carousel']['und']['entity'])) {
      foreach($fcsearch as $fsearch) {
        $search_string = $fsearch->field_ting_carousel_search['und'][0]['value'];
      }
    }
    $form['#submit'][] = 'ting_smart_carousel_form_submit';
  }
}

function ting_smart_carousel_form_submit(&$form, &$form_state) {
  if (!empty($fcsearch = $form_state['field']['field_ting_carousel']['und']['entity'])) {
    foreach($fcsearch as $fsearch) {
      $search_string = $fsearch->field_ting_carousel_search['und'][0]['value'];
      if (!empty($search_string)) {
        $cqlDoctor = new TingSearchCqlDoctor($search_string);
        $query = $cqlDoctor->string_to_cql();
        $cid = md5('new' . $query);
        cache_clear_all($cid, 'cache_ting_smart_carousel');
        drupal_set_message('Cache for '.$search_string.' cleared.');
      }
    }
  }
}

/**
 * Find ting entities with covers from a query.
 *
 * @param string $query
 *   Query to use.
 * @param int $start
 *   Offset to start from.
 * @param int $size
 *   Search chunk size to use.
 * @param array $ignore
 *   Material ids to skip.
 *
 * @return array
 *   Array of found ting entities (an array), next start to use, and whether
 *   the result end was reached.
 */
function ting_smart_carousel_find_entities_with_covers($query, $start, $size, array $ignore) {
  $entities_found_with_covers = array();
  $finished = FALSE;
  $entities = array();

  // Search offset must be divisible by chunk size.
  // We cannot map a situation where offset is not divisible by chunk size to
  // the search abstraction layer paging model.
  if (!$start % $size === 0) {
    throw new InvalidArgumentException('Offset to start from % search chunk size should not have remainders left.');
  }

  // Determine what page we are on based on the start position and size.
  // Start is 0 indexed while page number is 1 indexed.
  $page = floor($start / $size) + 1;

  $sal_query = ting_start_query()
          ->withRawQuery($query)
          ->withPage($page)
          ->withCount($size)
          ->withPopulateCollections(FALSE)
          ->withMaterialFilter($ignore, FALSE);

  $sal_query->reply_only = true;
  $results = $sal_query->execute();

  if (!$results->hasMoreResults()) {
    $finished = TRUE;
  }


  foreach ($results->openSearchResult->collections as $collection) {
    $opensearch_collection = new OpenSearchTingObjectCollection($collection);
    $object = $opensearch_collection->getPrimaryObject();
    $entities[$object->getId()] = $object;
  }

  // See what materials have covers.
  $covers = ting_smart_carousel_covers_get(array_keys($entities));

  // Loop over the fetched covers and build items.
  foreach ($covers as $id => $path) {
    $entities_found_with_covers[$id] = $entities[$id];
  }
  $entities_found_with_covers = ting_smart_carousel_sort($entities_found_with_covers, $query); 

  return ting_smart_carousel_proces_results($entities_found_with_covers);
}

function ting_smart_carousel_sort($objects, $query) {
  $results = array();
  $rest = array();
  if (strpos($query, '(') === 0) {
    $query_parts = explode(')', $query);
    $query = trim($query_parts[0], '(');
  }

  $faustnumbers = explode('or', $query);

  //file_put_contents("/var/www/drupalvm/drupal/debug/car15.txt", print_r($faustnumbers, TRUE), FILE_APPEND);
  if (count($faustnumbers) > 6) {
    foreach ($faustnumbers as $faust) {
      $faust = '870970-basis:' . trim($faust);
      if (array_key_exists($faust, $objects)) {
         $results[] = $objects[$faust];
         unset($objects[$faust]);
      } 
    }
    return array_merge ($results, $objects) ;
  } else {
    return $objects;
  }
}

function ting_smart_carousel_proces_results(array $objects) {
  $items = array();
  foreach ($objects as $object) {
  $cover = ting_smart_carousel_get_cover($object);
  $creators = ting_smart_carousel_get_creators($object);
  $items[] = theme ('ting_smart_carousel_item', array('title' => $object->getTitle(), 'creators' => $creators, 'cover' => $cover,));
  }
  return $items;
}

function ting_smart_carousel_get_cover($object) {
  $genericObject = new stdClass();
  $genericObject->id = $object->getId();
  $genericObject->title = $object->getTitle();
  $genericObject->creators = $object->getCreators;
  $image = theme('ting_object_cover', array('elements' => array('#object' => $object, '#image_style' => 'ding_list_medium')));
  $options = array(
      'html' => TRUE,
      'attributes' => array('title' => $object->getTitle()),
  );
  //$image = '<div class="ting-cover">' . $image . '</div>';
  return l($image, ting_smart_carousel_uri($object), $options);
}
function ting_smart_carousel_get_creators($object) {
  if (count($object->getCreators())) {
    if ($object->getDate()!= '') {
      $markup_string = t('By !author_link (@year)', array(
          '!author_link' => implode(', ', $object->getCreators()),
          // So wrong, but appears to be the way the data is.
          '@year' => $object->getDate(),
      ));
    } else {
      $markup_string = t('By !author_link', array(
          '!author_link' => implode(', ', $object->getCreators()),
      ));
    }
  } elseif ($object->getDate() != '') {
    $markup_string = t('(@year)', array('@year' => $object->getDate()));
  }
  return $markup_string;
}

function ting_smart_carousel_uri($object) {
  return 'ting/collection/' . $object->id;
}


/**
 * Get covers for an array of ids.
 *
 * @param array $requested_covers
 *   Ids of entities to return covers for.
 *
 * @return array
 *   Array of id => file path for found covers.
 */
function ting_smart_carousel_covers_get(array $requested_covers) {
  $entities = array();
  $covers = array();

  // Create array of loaded entities for passing to hooks.
  foreach ($requested_covers as $id) {
    // Ensure that the id at least seems valid.
    if (!mb_check_encoding($id, "UTF-8")) {
      continue;
    }

    // Determine if the local id is a known negative.
    if (cache_get('ting_covers:' . $id, FALSE)) {
      continue;
    }

    // If we we already have a valid cover image, use it.
    $path = ting_covers_object_path($id);
    if (file_exists($path)) {
      $covers[$id] = $path;
      continue;
    }

    // Queue for fetching by hook.
    $entities[$id] = ''; //ding_entity_load($id);
  }

  // Fetch covers by calling hook.
  foreach (module_implements('ting_covers') as $module) {
    foreach (module_invoke($module, 'ting_covers', $entities) as $id => $uri) {
      if ($uri && $path = _ting_covers_get_file($id, $uri)) {
        $covers[$id] = $path;
      }
      // Remove elements where a cover has been found, or suppressed.
      unset($entities[$id]);
    }
  }

  // Mark all remaining as not found in cache.
  foreach ($entities as $id => $entity) {
    cache_set('ting_covers:' . $id, 1, 'cache', $_SERVER['REQUEST_TIME'] + TING_COVERS_DEFAULT_CACHE_LIFETIME);
  }

  return $covers;
}
